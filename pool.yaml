substitutions:
  devicename: poolkille
  user: Kille
  fullname: Killes Pool
  #qm/h
  flow_rate: "1.25"
  power_pump: "185.2"

esphome:
  name: $devicename
  platform: ESP8266
  board: esp01_1m
  on_boot:
    priority: 200
    then:

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: ${devicename} Fallback Hotspot"
    password: !secret wifi_password

captive_portal:

# Enable logging
logger:

# Enable Home Assistant API
api:
  password: !secret esp_password

ota:
  password: !secret esp_password
  
web_server:
  port: 80

#Pinmapping


globals:
  - id: count_global_int
    type: int
    restore_value: no
    initial_value: '0'

dallas:
  - pin: GPIO14
    update_interval: 20s

#[15:40:34][D][dallas.sensor:082]:     0x03012043021BA028 Fühler auf dem Dach
#[15:40:34][D][dallas.sensor:082]:     0x61012043019A1528 Fühler im Wasser
#[15:40:34][D][dallas.sensor:082]:     0xB23C01D075341728 Kurzer Fühler auf der Terasse
#[15:48:22][D][dallas.sensor:082]:     0x6D01204304A9F728 Fühler im Pool zulauf


# Individual sensors
sensor:
  - platform: dallas
    address: 0x61012043019A1528
    name: ${user} Pool Temperatur
    id: pool_temp

  - platform: dallas
    address: 0x6D01204304A9F728
    name: ${user} Pool Zulauf
    id: pool_zulauf

  - platform: dallas
    address: 0x03012043021BA028
    name: ${user} Pool Dach
    id: dach_temp

  - platform: template
    name: ${user} Pool diff Dach
    id: dach_temp_diff
    unit_of_measurement: "°C"
    #icon: "mdi:water-percent"
    device_class: "temperature"
    state_class: "measurement"
    accuracy_decimals: 1
    update_interval: 20s
    lambda: return (id(dach_temp).state-id(pool_temp).state);
      
  - platform: dallas
    address: 0xB23C01D075341728 
    name: ${user} Dachterasse
    id: ambient

  - platform: template
    id: power_heater
    name: ${user} Solar Power
    unit_of_measurement: "kW"
    update_interval: 20s
    lambda: return ((id(pool_zulauf).state-id(pool_temp).state)*1.25*id(pool_pump).state); //$(flow_rate);

  - platform: template
    id: power_pump
    name: ${user} Förderpumpe Power
    unit_of_measurement: "W"
    update_interval: 20s
    lambda: return (185.2*id(pool_pump).state);

  - platform: total_daily_energy
    name: ${user} Solar Energie Tag
    power_id: power_heater
    id: energie_solar
    
  - platform: total_daily_energy
    name: ${user} Pumpe Energie Tag
    power_id: power_pump
    id: energie_pump

  - platform: template
    #id: power_pump
    name: ${user} Solar Elektrisch verhältniss
    unit_of_measurement: ""
    update_interval: 60s
    lambda: return ((id(energie_solar).state*1000.0)/id(energie_pump).state);


binary_sensor:
  - platform: status
    name: ${fullname} online

switch:
  - platform: gpio
    name: ${user} Pool Pumpe
    pin: GPIO12
    id: pool_pump

  - platform: gpio
    name: ${user} Pool Blaue LED
    pin: GPIO13
    id: blue_led
    inverted: yes
    
time:
  - platform: sntp
    # ...
    on_time:
      # Every minut
      - seconds: 0
        minutes: /1
        then:

climate:
  - platform: thermostat
    name: ${user} Pool automatik
    hysteresis: 1.25
    sensor: dach_temp_diff
    default_target_temperature_high: 10 °C
    cool_action:
      - switch.turn_on: pool_pump
    idle_action:
      - delay: 60s
      - switch.turn_off: pool_pump
    visual:
      min_temperature: -10 °C
      max_temperature: 30 °C
      temperature_step: 1 °C
      